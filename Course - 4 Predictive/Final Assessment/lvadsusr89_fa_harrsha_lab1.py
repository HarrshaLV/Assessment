# -*- coding: utf-8 -*-
"""LVADSUSR89_FA_Harrsha_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1APymD8bP1LHj_8ORDaYn4D1SAGdnCXyY
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv("/content/loan_approval.csv")
df.head()

df.columns

df.isnull().sum()

df.duplicated().sum()

df.dtypes

plt.figure(figsize=(16,9))
sns.heatmap(data=df.corr(),annot=True)

from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier as dcl
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix

print(df.isnull().sum())

df.dropna(inplace=True)
df.head()

Q1 = df[' income_annum'].quantile(0.25)
Q3 = df[' income_annum'].quantile(0.75)
IQR = Q3 - Q1
data = df[~((df[' income_annum'] < (Q1 - 1.5 * IQR)) | (df[' income_annum'] > (Q3 + 1.5 * IQR)))]

print(data.describe())

print(data.info())

sns.countplot(x=' loan_status', data=data)
plt.title('Loan Status Distribution')

label_encoder = LabelEncoder()
df[' education'] = label_encoder.fit_transform(df[[' education']])
df[' loan_status'] = label_encoder.fit_transform(df[[' loan_status']])
df[' self_employed'] = label_encoder.fit_transform(df[[' self_employed']])

X = df.drop(['loan_id', ' loan_status'], axis=1)
y = df[' loan_status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = dcl()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label=1)
recall = recall_score(y_test, y_pred, pos_label=1)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'Precision: {precision}')
print(f'Recall: {recall}')
print("******************************************************")
plt.title("Confusion Matrix")
sns.heatmap(conf_matrix,annot=True)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')