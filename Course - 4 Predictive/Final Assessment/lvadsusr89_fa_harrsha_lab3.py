# -*- coding: utf-8 -*-
"""LVADSUSR89_FA_Harrsha_lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ayw-_UA3xp1A_YauSLcnMxIqcsNqgTFo
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import seaborn as sns
# %matplotlib inline

df = pd.read_csv("/content/seeds.csv")
df.head()

"""# Data exploration and pre-processing - Handle missing values"""

print(df.isnull().sum())
#filling null values in the df with mean
df.fillna(df.mean(), inplace=True)

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

"""#Exploratory Data Analysis

"""

df.describe()

print(df.shape)

print(df.info())

df.hist(figsize=(10,10))
plt.tight_layout()

plt.figure(figsize=(10, 10))
plt.title('Correlation Heatmap')
sns.heatmap(df.corr(), annot=True, cmap='rainbow', fmt='.2f')

sns.pairplot(df, diag_kind='kde')

"""# To determine the number of optimal clusters

"""

inertia_values = []
silhouette_scores = []
k_values = range(2, 10)

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia_values.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

plt.plot(k_values, inertia_values, marker='*',color='red')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Curve for determining Optimal k value')
plt.xticks(k_values)

plt.plot(k_values, silhouette_scores, marker='o',color='red')
plt.xticks(k_values)
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Optimal k')

optimal_k = 7
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(scaled_data)

cluster_labels = kmeans.predict(scaled_data)

silhouette_avg = silhouette_score(scaled_data, cluster_labels)
print("Ave silhouetter score: ",silhouette_avg)

df['Cluster'] = kmeans.labels_
clusters = df.groupby('Cluster').mean()
print(clusters)

