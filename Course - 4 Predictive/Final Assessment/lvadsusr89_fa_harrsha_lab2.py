# -*- coding: utf-8 -*-
"""LVADSUSR89_FA_Harrsha_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jZjNMiwmVXG7DXCBMLXkZLqXH1PoxIqS
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv("/content/auto-mpg.csv")
df.head()

print(df.isnull().sum())

#Filling missing values
df.fillna(df.mean(), inplace=True)

"""
#Deleting non numeric columns for Exploratory data analysis"""

df.drop(['car name'], axis=1, inplace=True)
df.drop(['horsepower'],axis=1, inplace=True)

"""# Exploratory Data Analysis"""

print(df.shape)

print(df.info())

print(df.describe())

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='rainbow')

df.hist(figsize=(10, 8))
plt.tight_layout()

# Pairplot of numerical features
sns.pairplot(df)

"""# Handling Outliers"""

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
data = df[~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)]

X = df.drop('mpg', axis=1)
y = df['mpg']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("**********************************************************************************")
print(f'Mean Squared Error: {mse}')
print("**********************************************************************************")
print(f'R-squared: {r2}')
print("**********************************************************************************")

plt.scatter(y_test, y_pred,color='green')
plt.xlabel('Actual MPG')
plt.ylabel('Predicted MPG')
plt.title('Actual value  vs. Predicted ')

coefficients = pd.DataFrame(model.coef_, X.columns, columns=['Coefficient'])
coefficients.sort_values(by='Coefficient', ascending=False, inplace=True)
sns.barplot(x='Coefficient', y=coefficients.index, data=coefficients)
plt.title('Feature Importance')