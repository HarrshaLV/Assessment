# -*- coding: utf-8 -*-
"""LVADSUSR89_harrshat_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nxSbK9BTjue49caNfD5ccX4ATrFyMu_D
"""

import pandas as pd
df = pd.read_csv("expenses.csv")
df.head()

"""#1

"""

import matplotlib.pyplot as plt
import seaborn as sns

duplicates = df[df.duplicated()]
print("Duplicate rows:")
print(duplicates)
df.drop_duplicates(inplace=True)

print("\n")
print("Missing values")
df.isnull().sum()

df.hist(figsize=(5, 5))
plt.tight_layout()
plt.show()

df.boxplot(figsize=(5, 5))
plt.tight_layout()
plt.show()

#Correlation
corr_mat = df.corr()
sns.heatmap(corr_mat, annot=True, cmap='rainbow',cbar=False)
plt.title('Correlation Matrix')
plt.show()

"""#2"""

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

df["sex"] = label_encoder.fit_transform(df["sex"])
df["smoker"] = label_encoder.fit_transform(df["smoker"])
df["region"] = label_encoder.fit_transform(df["region"])

print(df.head())

from sklearn.preprocessing import StandardScaler
numerical_features = ['age', 'bmi','charges']
for feature in numerical_features:
    lower_bound = df[feature].quantile(0.05)
    upper_bound = df[feature].quantile(0.95)
    df[feature] = df[feature].clip(lower=lower_bound, upper=upper_bound)

df = df.drop('sex',axis=1)
df = df.drop('children',axis=1)
df = df.drop('region',axis=1)

X = df.drop(columns=['charges'])
y = df['charges']

scaler = StandardScaler()

X_scaled = scaler.fit_transform(X)
scaled_data = pd.DataFrame(X_scaled, columns=X.columns)

scaled_data['Target'] = y

df.head()

"""##4

"""

from sklearn.model_selection import train_test_split

X = df[['age','bmi','smoker']]
y = df['charges']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""#5"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train,y_train)
y_pred = model.predict(X_test)

"""##6"""

from sklearn.metrics import mean_squared_error, r2_score
from math import sqrt

accuracy = model.score(X_test, y_test)

MSE = mean_squared_error(y_test, y_pred)

R_squared = r2_score(y_test, y_pred)

RMSE = sqrt(MSE)

print("Accuracy:", accuracy)
print("Mean Squared Error:", MSE)
print("R-squared:", R_squared)

"""-  During training, it controls the complexity of the steps taken to reach best/optimal solution.

- A proper rate guarantees efficient convergence by balancing between fast convergence and stable optimization,
 which prevents overfitting or slow convergence.
"""

